; Listing generated by Microsoft (R) Optimizing Compiler Version 18.00.40629.0 

	TITLE	C:\Users\Ali\Desktop\MangOS\SystemCore\SysCore\Kernel\vmm.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	?vmm_load_pdbr@@YAXPAUpdir@@@Z			; vmm_load_pdbr
PUBLIC	?vmm_get_cur_dir@@YAPAUpdir@@XZ			; vmm_get_cur_dir
PUBLIC	?vmm_alloc_frame@@YA_NPAI@Z			; vmm_alloc_frame
PUBLIC	?vmm_free_frame@@YA_NPAI@Z			; vmm_free_frame
PUBLIC	?vmm_map_page@@YAXPAX0@Z			; vmm_map_page
PUBLIC	?vmm_initialize@@YAXXZ				; vmm_initialize
PUBLIC	?vmm_pd_entry_add_attrib@@YAXPAII@Z		; vmm_pd_entry_add_attrib
PUBLIC	?vmm_pd_entry_del_attrib@@YAXPAII@Z		; vmm_pd_entry_del_attrib
PUBLIC	?vmm_pd_entry_set_frame@@YAXPAII@Z		; vmm_pd_entry_set_frame
PUBLIC	?vmm_pd_entry_is_present@@YA_NI@Z		; vmm_pd_entry_is_present
PUBLIC	?vmm_pd_entry_is_user@@YA_NI@Z			; vmm_pd_entry_is_user
PUBLIC	?vmm_pd_entry_is_4mb@@YA_NI@Z			; vmm_pd_entry_is_4mb
PUBLIC	?vmm_pt_entry_add_attrib@@YAXPAII@Z		; vmm_pt_entry_add_attrib
PUBLIC	?vmm_pt_entry_del_attrib@@YAXPAII@Z		; vmm_pt_entry_del_attrib
PUBLIC	?vmm_pt_entry_set_frame@@YAXPAII@Z		; vmm_pt_entry_set_frame
PUBLIC	?vmm_pt_entry_is_present@@YA_NI@Z		; vmm_pt_entry_is_present
PUBLIC	?vmm_pt_entry_is_writable@@YA_NI@Z		; vmm_pt_entry_is_writable
PUBLIC	?vmm_paging_enable@@YAX_N@Z			; vmm_paging_enable
PUBLIC	?vmm_pd_switch@@YA_NPAUpdir@@@Z			; vmm_pd_switch
PUBLIC	?vmm_flush_tlb_entry@@YAXI@Z			; vmm_flush_tlb_entry
EXTRN	?memset@@YAPAXPAXDI@Z:PROC			; memset
EXTRN	?pmm_alloc_block@@YAPAXXZ:PROC			; pmm_alloc_block
EXTRN	?pmm_free_block@@YAXPAX@Z:PROC			; pmm_free_block
_BSS	SEGMENT
__vmm_cur_dir DD 01H DUP (?)
_BSS	ENDS
; Function compile flags: /Ogtpy
; File c:\users\ali\desktop\mangos\systemcore\syscore\kernel\vmm.cpp
_TEXT	SEGMENT
_addr$ = 8						; size = 4
?vmm_flush_tlb_entry@@YAXI@Z PROC			; vmm_flush_tlb_entry

; 35   : 	_asm{
; 36   : 		cli 

	cli

; 37   : 		invlpg addr 

	invlpg	DWORD PTR _addr$[esp-4]

; 38   : 		sti

	sti

; 39   : 	}
; 40   : }

	ret	0
?vmm_flush_tlb_entry@@YAXI@Z ENDP			; vmm_flush_tlb_entry
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\users\ali\desktop\mangos\systemcore\syscore\kernel\vmm.cpp
;	COMDAT ?vmm_pd_switch@@YA_NPAUpdir@@@Z
_TEXT	SEGMENT
_dir$ = 8						; size = 4
_pd$ = 8						; size = 4
?vmm_pd_switch@@YA_NPAUpdir@@@Z PROC			; vmm_pd_switch, COMDAT

; 26   : 	if (!pd)

	mov	eax, DWORD PTR _pd$[esp-4]
	test	eax, eax
	jne	SHORT $LN1@vmm_pd_swi

; 27   : 		return false;

	xor	al, al

; 32   : }

	ret	0
$LN1@vmm_pd_swi:

; 28   : 
; 29   : 	_vmm_cur_dir = pd;

	mov	DWORD PTR __vmm_cur_dir, eax

; 30   : 	vmm_load_pdbr((pdir*)&_vmm_cur_dir->entry);

	mov	DWORD PTR _dir$[esp-4], eax
	mov	eax, DWORD PTR _dir$[esp-4]
	mov	cr3, eax

; 31   : 	return true;

	mov	al, 1

; 32   : }

	ret	0
?vmm_pd_switch@@YA_NPAUpdir@@@Z ENDP			; vmm_pd_switch
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\users\ali\desktop\mangos\systemcore\syscore\kernel\vmm.cpp
_TEXT	SEGMENT
_b$ = 8							; size = 1
?vmm_paging_enable@@YAX_N@Z PROC			; vmm_paging_enable

; 121  : void vmm_paging_enable(bool b){

	push	ebp
	mov	ebp, esp

; 122  : 	_asm {
; 123  : 		mov eax, cr0

	mov	eax, cr0

; 124  : 		cmp byte ptr[b],1

	cmp	BYTE PTR _b$[ebp], 1

; 125  : 		jnz fal

	jne	SHORT $fal$4

; 126  : 		or eax, 0x80000000; Bit 31 (PG) : Enables Memory Paging.

	or	eax, -2147483648			; 80000000H

; 127  : 		jmp set

	jmp	SHORT $set$5
$fal$4:

; 128  : 	fal:
; 129  : 		and eax, 0x7FFFFFFF; clear Bit 31 (PG) : Enables Memory Paging.

	and	eax, 2147483647				; 7fffffffH
$set$5:

; 130  : 	set:
; 131  : 		mov cr0, eax

	mov	cr0, eax

; 132  : 	}
; 133  : }

	pop	ebp
	ret	0
?vmm_paging_enable@@YAX_N@Z ENDP			; vmm_paging_enable
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\users\ali\desktop\mangos\systemcore\syscore\kernel\vmm.cpp
;	COMDAT ?vmm_pt_entry_is_writable@@YA_NI@Z
_TEXT	SEGMENT
_e$ = 8							; size = 4
?vmm_pt_entry_is_writable@@YA_NI@Z PROC			; vmm_pt_entry_is_writable, COMDAT

; 161  : 	return e & VMM_PT_ENTRY_WRITABLE;

	mov	eax, DWORD PTR _e$[esp-4]
	shr	eax, 1
	and	al, 1

; 162  : }

	ret	0
?vmm_pt_entry_is_writable@@YA_NI@Z ENDP			; vmm_pt_entry_is_writable
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\users\ali\desktop\mangos\systemcore\syscore\kernel\vmm.cpp
;	COMDAT ?vmm_pt_entry_is_present@@YA_NI@Z
_TEXT	SEGMENT
_e$ = 8							; size = 4
?vmm_pt_entry_is_present@@YA_NI@Z PROC			; vmm_pt_entry_is_present, COMDAT

; 157  : 	return e & VMM_PT_ENTRY_PRESENT;

	mov	eax, DWORD PTR _e$[esp-4]
	and	eax, 1

; 158  : }

	ret	0
?vmm_pt_entry_is_present@@YA_NI@Z ENDP			; vmm_pt_entry_is_present
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\users\ali\desktop\mangos\systemcore\syscore\kernel\vmm.cpp
;	COMDAT ?vmm_pt_entry_set_frame@@YAXPAII@Z
_TEXT	SEGMENT
_e$ = 8							; size = 4
_addr$ = 12						; size = 4
?vmm_pt_entry_set_frame@@YAXPAII@Z PROC			; vmm_pt_entry_set_frame, COMDAT

; 153  : 	*e = (*e & ~VMM_PT_ENTRY_FRAME) | addr;

	mov	ecx, DWORD PTR _e$[esp-4]
	mov	eax, DWORD PTR [ecx]
	and	eax, -2147479553			; 80000fffH
	or	eax, DWORD PTR _addr$[esp-4]
	mov	DWORD PTR [ecx], eax

; 154  : }

	ret	0
?vmm_pt_entry_set_frame@@YAXPAII@Z ENDP			; vmm_pt_entry_set_frame
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\users\ali\desktop\mangos\systemcore\syscore\kernel\vmm.cpp
;	COMDAT ?vmm_pt_entry_del_attrib@@YAXPAII@Z
_TEXT	SEGMENT
_e$ = 8							; size = 4
_attrib$ = 12						; size = 4
?vmm_pt_entry_del_attrib@@YAXPAII@Z PROC		; vmm_pt_entry_del_attrib, COMDAT

; 149  : 	*e &= ~attrib;

	mov	eax, DWORD PTR _e$[esp-4]
	mov	ecx, DWORD PTR _attrib$[esp-4]
	not	ecx
	and	DWORD PTR [eax], ecx

; 150  : }

	ret	0
?vmm_pt_entry_del_attrib@@YAXPAII@Z ENDP		; vmm_pt_entry_del_attrib
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\users\ali\desktop\mangos\systemcore\syscore\kernel\vmm.cpp
;	COMDAT ?vmm_pt_entry_add_attrib@@YAXPAII@Z
_TEXT	SEGMENT
_e$ = 8							; size = 4
_attrib$ = 12						; size = 4
?vmm_pt_entry_add_attrib@@YAXPAII@Z PROC		; vmm_pt_entry_add_attrib, COMDAT

; 145  : 	*e |= attrib;

	mov	ecx, DWORD PTR _e$[esp-4]
	mov	eax, DWORD PTR _attrib$[esp-4]
	or	DWORD PTR [ecx], eax

; 146  : }

	ret	0
?vmm_pt_entry_add_attrib@@YAXPAII@Z ENDP		; vmm_pt_entry_add_attrib
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\users\ali\desktop\mangos\systemcore\syscore\kernel\vmm.cpp
;	COMDAT ?vmm_pd_entry_is_4mb@@YA_NI@Z
_TEXT	SEGMENT
_e$ = 8							; size = 4
?vmm_pd_entry_is_4mb@@YA_NI@Z PROC			; vmm_pd_entry_is_4mb, COMDAT

; 189  : 	return e & VMM_PD_ENTRY_4MB;

	mov	eax, DWORD PTR _e$[esp-4]
	shr	eax, 7
	and	al, 1

; 190  : }

	ret	0
?vmm_pd_entry_is_4mb@@YA_NI@Z ENDP			; vmm_pd_entry_is_4mb
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\users\ali\desktop\mangos\systemcore\syscore\kernel\vmm.cpp
;	COMDAT ?vmm_pd_entry_is_user@@YA_NI@Z
_TEXT	SEGMENT
_e$ = 8							; size = 4
?vmm_pd_entry_is_user@@YA_NI@Z PROC			; vmm_pd_entry_is_user, COMDAT

; 185  : 	return e & VMM_PD_ENTRY_USER;

	mov	eax, DWORD PTR _e$[esp-4]
	shr	eax, 2
	and	al, 1

; 186  : }

	ret	0
?vmm_pd_entry_is_user@@YA_NI@Z ENDP			; vmm_pd_entry_is_user
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\users\ali\desktop\mangos\systemcore\syscore\kernel\vmm.cpp
;	COMDAT ?vmm_pd_entry_is_present@@YA_NI@Z
_TEXT	SEGMENT
_e$ = 8							; size = 4
?vmm_pd_entry_is_present@@YA_NI@Z PROC			; vmm_pd_entry_is_present, COMDAT

; 177  : 	return e & VMM_PD_ENTRY_PRESENT;

	mov	eax, DWORD PTR _e$[esp-4]
	and	eax, 1

; 178  : }

	ret	0
?vmm_pd_entry_is_present@@YA_NI@Z ENDP			; vmm_pd_entry_is_present
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\users\ali\desktop\mangos\systemcore\syscore\kernel\vmm.cpp
;	COMDAT ?vmm_pd_entry_set_frame@@YAXPAII@Z
_TEXT	SEGMENT
_e$ = 8							; size = 4
_addr$ = 12						; size = 4
?vmm_pd_entry_set_frame@@YAXPAII@Z PROC			; vmm_pd_entry_set_frame, COMDAT

; 173  : 	*e = (*e & ~VMM_PD_ENTRY_FRAME) | addr;

	mov	ecx, DWORD PTR _e$[esp-4]
	mov	eax, DWORD PTR [ecx]
	and	eax, -2147479553			; 80000fffH
	or	eax, DWORD PTR _addr$[esp-4]
	mov	DWORD PTR [ecx], eax

; 174  : }

	ret	0
?vmm_pd_entry_set_frame@@YAXPAII@Z ENDP			; vmm_pd_entry_set_frame
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\users\ali\desktop\mangos\systemcore\syscore\kernel\vmm.cpp
;	COMDAT ?vmm_pd_entry_del_attrib@@YAXPAII@Z
_TEXT	SEGMENT
_e$ = 8							; size = 4
_attrib$ = 12						; size = 4
?vmm_pd_entry_del_attrib@@YAXPAII@Z PROC		; vmm_pd_entry_del_attrib, COMDAT

; 169  : 	*e &= ~attrib;

	mov	eax, DWORD PTR _e$[esp-4]
	mov	ecx, DWORD PTR _attrib$[esp-4]
	not	ecx
	and	DWORD PTR [eax], ecx

; 170  : }

	ret	0
?vmm_pd_entry_del_attrib@@YAXPAII@Z ENDP		; vmm_pd_entry_del_attrib
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\users\ali\desktop\mangos\systemcore\syscore\kernel\vmm.cpp
;	COMDAT ?vmm_pd_entry_add_attrib@@YAXPAII@Z
_TEXT	SEGMENT
_e$ = 8							; size = 4
_attrib$ = 12						; size = 4
?vmm_pd_entry_add_attrib@@YAXPAII@Z PROC		; vmm_pd_entry_add_attrib, COMDAT

; 165  : 	*e |= attrib;

	mov	ecx, DWORD PTR _e$[esp-4]
	mov	eax, DWORD PTR _attrib$[esp-4]
	or	DWORD PTR [ecx], eax

; 166  : }

	ret	0
?vmm_pd_entry_add_attrib@@YAXPAII@Z ENDP		; vmm_pd_entry_add_attrib
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\users\ali\desktop\mangos\systemcore\syscore\kernel\vmm.cpp
_TEXT	SEGMENT
_dir$ = -8						; size = 4
_b$ = -4						; size = 1
?vmm_initialize@@YAXXZ PROC				; vmm_initialize

; 89   : void vmm_initialize(){

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	push	edi

; 90   : 	ptable * pt_first4mb = (ptable * )pmm_alloc_block();

	call	?pmm_alloc_block@@YAPAXXZ		; pmm_alloc_block
	mov	edi, eax

; 91   : 	if (!pt_first4mb)

	test	edi, edi
	je	$LN17@vmm_initia

; 92   : 		return;
; 93   : 	ptable * pt_1mb_to_3gb = (ptable *)pmm_alloc_block();

	push	ebx
	call	?pmm_alloc_block@@YAPAXXZ		; pmm_alloc_block
	mov	ebx, eax

; 94   : 	if (!pt_1mb_to_3gb)

	test	ebx, ebx
	je	$LN31@vmm_initia

; 95   : 		return;
; 96   : 	/* Map 1st 4Mb (phys) to 1st 4Mb (virt) - identity map */
; 97   : 	for (uint32_t i = 0, frame = 0; i < 1024; i++, frame += 4096)

	push	esi
	xor	esi, esi
	xor	edx, edx
	npad	5
$LL23@vmm_initia:

; 98   : 		pt_first4mb->entry[i] = frame | VMM_PT_ENTRY_PRESENT;

	mov	ecx, esi
	add	esi, 4096				; 00001000H
	or	ecx, 1
	mov	DWORD PTR [edi+edx*4], ecx
	inc	edx
	cmp	edx, 1024				; 00000400H
	jb	SHORT $LL23@vmm_initia

; 99   : 	
; 100  : 	for (uint32_t i = 0, frame = 0x100000; i < 1024; i++, frame += 4096)

	mov	edx, 1048576				; 00100000H
	xor	ecx, ecx
	npad	2
$LL25@vmm_initia:

; 101  : 		pt_1mb_to_3gb->entry[i] = frame | VMM_PT_ENTRY_PRESENT;

	mov	eax, edx
	add	edx, 4096				; 00001000H
	or	eax, 1
	mov	DWORD PTR [ebx+ecx*4], eax
	inc	ecx
	cmp	ecx, 1024				; 00000400H
	jb	SHORT $LL25@vmm_initia

; 102  : 
; 103  : 	/*set Page table to page directory*/
; 104  : 	pdir *dir = (pdir*) pmm_alloc_block();

	call	?pmm_alloc_block@@YAPAXXZ		; pmm_alloc_block
	mov	esi, eax

; 105  : 	if (!dir)

	test	esi, esi
	je	SHORT $LN32@vmm_initia

; 106  : 		return;
; 107  : 
; 108  : 	memset(dir, 0, sizeof(pdir));

	push	4096					; 00001000H
	push	0
	push	esi
	call	?memset@@YAPAXPAXDI@Z			; memset

; 109  : 	dir->entry[0] = (pd_entry)pt_first4mb | VMM_PT_ENTRY_PRESENT | VMM_PT_ENTRY_WRITABLE;

	or	edi, 3

; 110  : 	dir->entry[VMM_GET_PD_ENTRY(0xC0000000)] = (pt_entry)pt_1mb_to_3gb | VMM_PT_ENTRY_PRESENT | VMM_PT_ENTRY_WRITABLE;
; 111  : 
; 112  : 	/*Set Page Directory Base Address*/
; 113  : 	vmm_pd_switch (dir);

	mov	DWORD PTR __vmm_cur_dir, esi
	add	esp, 12					; 0000000cH
	mov	DWORD PTR [esi], edi
	or	ebx, 3
	mov	DWORD PTR _dir$[ebp], esi
	mov	DWORD PTR [esi+3072], ebx
	mov	eax, DWORD PTR _dir$[ebp]
	mov	cr3, eax

; 114  : 
; 115  : 	/* paging Enable */
; 116  : 	vmm_paging_enable(true);

	mov	BYTE PTR _b$[ebp], 1
	mov	eax, cr0
	cmp	BYTE PTR _b$[ebp], 1
	jne	SHORT $fal$34
	or	eax, -2147483648			; 80000000H
	jmp	SHORT $set$35
$fal$34:
	and	eax, 2147483647				; 7fffffffH
$set$35:
	mov	cr0, eax
$LN32@vmm_initia:
	pop	esi
$LN31@vmm_initia:
	pop	ebx
$LN17@vmm_initia:
	pop	edi

; 117  : 
; 118  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?vmm_initialize@@YAXXZ ENDP				; vmm_initialize
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\users\ali\desktop\mangos\systemcore\syscore\kernel\vmm.cpp
_TEXT	SEGMENT
_phys$ = 8						; size = 4
_virt$ = 12						; size = 4
?vmm_map_page@@YAXPAX0@Z PROC				; vmm_map_page

; 63   : 	pdir *dir = _vmm_cur_dir;
; 64   : 	pd_entry *pde = (pd_entry *)&dir->entry[VMM_GET_PD_ENTRY((pd_entry)virt)];

	mov	eax, DWORD PTR __vmm_cur_dir
	push	ebx
	push	esi
	mov	esi, DWORD PTR _virt$[esp+4]
	mov	ecx, esi
	shr	ecx, 22					; 00000016H

; 65   : 	if (!(*pde&VMM_PT_ENTRY_PRESENT)){

	test	BYTE PTR [eax+ecx*4], 1
	push	edi
	lea	edi, DWORD PTR [eax+ecx*4]
	jne	SHORT $LN9@vmm_map_pa

; 66   : 		//! page table not present, allocate it
; 67   : 		ptable* table = (ptable*)pmm_alloc_block();

	call	?pmm_alloc_block@@YAPAXXZ		; pmm_alloc_block
	mov	ebx, eax

; 68   : 		if (!table)

	test	ebx, ebx
	je	SHORT $LN13@vmm_map_pa

; 69   : 			return;
; 70   : 
; 71   : 		//! clear page table
; 72   : 		memset(table, 0, sizeof(ptable));

	push	4096					; 00001000H
	push	0
	push	ebx
	call	?memset@@YAPAXPAXDI@Z			; memset

; 73   : 
; 74   : 		//! create a new entry
; 75   : 		pd_entry* entry = &dir->entry[VMM_GET_PD_ENTRY((uint32_t)virt)];
; 76   : 
; 77   : 		//! map in the table (Can also just do *entry |= 3) to enable these bits
; 78   : 		vmm_pd_entry_add_attrib(entry, VMM_PT_ENTRY_PRESENT);
; 79   : 		vmm_pd_entry_add_attrib(entry, VMM_PT_ENTRY_WRITABLE);
; 80   : 		vmm_pd_entry_set_frame(entry, (physical_addr)table);

	mov	eax, DWORD PTR [edi]
	add	esp, 12					; 0000000cH
	and	eax, -2147479553			; 80000fffH
	or	eax, ebx
	or	eax, 3
	mov	DWORD PTR [edi], eax
$LN9@vmm_map_pa:

; 81   : 		
; 82   : 	}
; 83   : 	ptable *table = (ptable *)(*pde& ~0xfff);

	mov	eax, DWORD PTR [edi]
	and	eax, -4096				; fffff000H

; 84   : 	pt_entry *page = &table->entry[VMM_GET_PT_ENTRY((pt_entry)virt)];

	shr	esi, 12					; 0000000cH
	and	esi, 1023				; 000003ffH
	lea	ecx, DWORD PTR [eax+esi*4]

; 85   : 	vmm_pt_entry_set_frame(page, (physical_addr)phys);

	mov	eax, DWORD PTR [ecx]
	and	eax, -2147479553			; 80000fffH

; 86   : 	vmm_pt_entry_add_attrib(page, VMM_PT_ENTRY_PRESENT);

	or	eax, DWORD PTR _phys$[esp+8]
	or	eax, 1
	mov	DWORD PTR [ecx], eax
$LN13@vmm_map_pa:

; 87   : }

	pop	edi
	pop	esi
	pop	ebx
	ret	0
?vmm_map_page@@YAXPAX0@Z ENDP				; vmm_map_page
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\users\ali\desktop\mangos\systemcore\syscore\kernel\vmm.cpp
_TEXT	SEGMENT
_pe$ = 8						; size = 4
?vmm_free_frame@@YA_NPAI@Z PROC				; vmm_free_frame

; 56   : bool vmm_free_frame (pt_entry * pe){

	push	esi

; 57   : 	pmm_free_block(pe); /*Maybe this wrong because we send Address of entry ?*/

	mov	esi, DWORD PTR _pe$[esp]
	push	esi
	call	?pmm_free_block@@YAXPAX@Z		; pmm_free_block

; 58   : 	vmm_pt_entry_del_attrib(pe, VMM_PT_ENTRY_PRESENT);

	and	DWORD PTR [esi], -2			; fffffffeH
	add	esp, 4

; 59   : 	return true;

	mov	al, 1
	pop	esi

; 60   : }

	ret	0
?vmm_free_frame@@YA_NPAI@Z ENDP				; vmm_free_frame
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\users\ali\desktop\mangos\systemcore\syscore\kernel\vmm.cpp
_TEXT	SEGMENT
_pe$ = 8						; size = 4
?vmm_alloc_frame@@YA_NPAI@Z PROC			; vmm_alloc_frame

; 48   : 	void *p = pmm_alloc_block();

	call	?pmm_alloc_block@@YAPAXXZ		; pmm_alloc_block
	mov	edx, eax

; 49   : 	if (!p)

	test	edx, edx
	jne	SHORT $LN1@vmm_alloc_

; 50   : 		return false;

	xor	al, al

; 54   : }

	ret	0
$LN1@vmm_alloc_:

; 51   : 	vmm_pt_entry_set_frame(pe, (physical_addr)p);

	mov	ecx, DWORD PTR _pe$[esp-4]
	mov	eax, DWORD PTR [ecx]
	and	eax, -2147479553			; 80000fffH

; 52   : 	vmm_pt_entry_add_attrib(pe, VMM_PT_ENTRY_PRESENT);

	or	eax, edx
	or	eax, 1
	mov	DWORD PTR [ecx], eax

; 53   : 	return true;

	mov	al, 1

; 54   : }

	ret	0
?vmm_alloc_frame@@YA_NPAI@Z ENDP			; vmm_alloc_frame
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\users\ali\desktop\mangos\systemcore\syscore\kernel\vmm.cpp
_TEXT	SEGMENT
?vmm_get_cur_dir@@YAPAUpdir@@XZ PROC			; vmm_get_cur_dir

; 44   : 	return _vmm_cur_dir;

	mov	eax, DWORD PTR __vmm_cur_dir

; 45   : }

	ret	0
?vmm_get_cur_dir@@YAPAUpdir@@XZ ENDP			; vmm_get_cur_dir
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\users\ali\desktop\mangos\systemcore\syscore\kernel\vmm.cpp
_TEXT	SEGMENT
_dir$ = 8						; size = 4
?vmm_load_pdbr@@YAXPAUpdir@@@Z PROC			; vmm_load_pdbr

; 137  : 	_asm {
; 138  : 		mov eax, dword ptr[dir]

	mov	eax, DWORD PTR _dir$[esp-4]

; 139  : 		mov cr3, eax

	mov	cr3, eax

; 140  : 	}
; 141  : }

	ret	0
?vmm_load_pdbr@@YAXPAUpdir@@@Z ENDP			; vmm_load_pdbr
_TEXT	ENDS
END
