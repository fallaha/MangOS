; Listing generated by Microsoft (R) Optimizing Compiler Version 18.00.40629.0 

	TITLE	C:\Users\Ali\Desktop\MangOS\SystemCore\SysCore\Kernel\main.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

CONST	SEGMENT
$SG2984	DB	'%x ', 00H
CONST	ENDS
PUBLIC	?kernel_initialize@@YAHPAUmultiboot_info@@@Z	; kernel_initialize
PUBLIC	?sleep@@YAXH@Z					; sleep
PUBLIC	?getch@@YAEXZ					; getch
PUBLIC	?gets@@YAXPADH@Z				; gets
PUBLIC	?stoi@@YAHPAD@Z					; stoi
PUBLIC	_main
EXTRN	?DebugPutc@@YAXE@Z:PROC				; DebugPutc
EXTRN	?DebugGotoXY@@YAXEE@Z:PROC			; DebugGotoXY
EXTRN	?DebugClrScreen@@YAXE@Z:PROC			; DebugClrScreen
EXTRN	?DebugPrintf@@YAHPBDZZ:PROC			; DebugPrintf
EXTRN	?hal_initialize@@YAXXZ:PROC			; hal_initialize
EXTRN	?setvect@@YAXIA6AXXZ@Z:PROC			; setvect
EXTRN	?interrupt_enable@@YAXXZ:PROC			; interrupt_enable
EXTRN	?get_tick@@YAIXZ:PROC				; get_tick
EXTRN	?divide_by_zero_fault@@YAXIII@Z:PROC		; divide_by_zero_fault
EXTRN	?single_step_trap@@YAXIII@Z:PROC		; single_step_trap
EXTRN	?nmi_trap@@YAXIII@Z:PROC			; nmi_trap
EXTRN	?breakpoint_trap@@YAXIII@Z:PROC			; breakpoint_trap
EXTRN	?overflow_trap@@YAXIII@Z:PROC			; overflow_trap
EXTRN	?bounds_check_fault@@YAXIII@Z:PROC		; bounds_check_fault
EXTRN	?invalid_opcode_fault@@YAXIII@Z:PROC		; invalid_opcode_fault
EXTRN	?no_device_fault@@YAXIII@Z:PROC			; no_device_fault
EXTRN	?double_fault_abort@@YAXIIII@Z:PROC		; double_fault_abort
EXTRN	?invalid_tss_fault@@YAXIIII@Z:PROC		; invalid_tss_fault
EXTRN	?no_segment_fault@@YAXIIII@Z:PROC		; no_segment_fault
EXTRN	?stack_fault@@YAXIIII@Z:PROC			; stack_fault
EXTRN	?general_protection_fault@@YAXIIII@Z:PROC	; general_protection_fault
EXTRN	?page_fault@@YAXIIII@Z:PROC			; page_fault
EXTRN	?fpu_fault@@YAXIII@Z:PROC			; fpu_fault
EXTRN	?alignment_check_fault@@YAXIIII@Z:PROC		; alignment_check_fault
EXTRN	?machine_check_abort@@YAXIII@Z:PROC		; machine_check_abort
EXTRN	?simd_fpu_fault@@YAXIII@Z:PROC			; simd_fpu_fault
EXTRN	?pmm_initialize@@YAXII@Z:PROC			; pmm_initialize
EXTRN	?pmm_set_region@@YAXII@Z:PROC			; pmm_set_region
EXTRN	?pmm_clr_region@@YAXII@Z:PROC			; pmm_clr_region
EXTRN	?vmm_initialize@@YAXXZ:PROC			; vmm_initialize
EXTRN	?kbrd_initilize@@YAXXZ:PROC			; kbrd_initilize
EXTRN	?kbrd_get_last_std_char@@YAEXZ:PROC		; kbrd_get_last_std_char
EXTRN	?kbrd_destroy_last_char@@YAXXZ:PROC		; kbrd_destroy_last_char
EXTRN	?kbrd_make@@YAEE@Z:PROC				; kbrd_make
EXTRN	?flpydsk_set_dma@@YAXH@Z:PROC			; flpydsk_set_dma
EXTRN	?flpydsk_install@@YAXH@Z:PROC			; flpydsk_install
EXTRN	?flpydsk_set_working_drive@@YAXE@Z:PROC		; flpydsk_set_working_drive
EXTRN	?flpydsk_read_sector@@YAPAEH@Z:PROC		; flpydsk_read_sector
;	COMDAT ?ticks@?1??sleep@@YAXH@Z@4HA
_BSS	SEGMENT
?ticks@?1??sleep@@YAXH@Z@4HA DD 01H DUP (?)		; `sleep'::`2'::ticks
_BSS	ENDS
;	COMDAT ?$S1@?1??sleep@@YAXH@Z@4IA
_BSS	SEGMENT
?$S1@?1??sleep@@YAXH@Z@4IA DD 01H DUP (?)		; S1<`template-parameter-2',leep,unsigned int, ?? &>
_BSS	ENDS
; Function compile flags: /Ogtpy
; File c:\users\ali\desktop\mangos\systemcore\syscore\kernel\main.cpp
;	COMDAT _main
_TEXT	SEGMENT
_info$ = 8						; size = 4
_main	PROC						; COMDAT

; 121  : int _cdecl main (multiboot_info* info) {

	push	esi
	push	edi

; 122  : 	kernel_initialize(info);

	push	DWORD PTR _info$[esp+4]
	call	?kernel_initialize@@YAHPAUmultiboot_info@@@Z ; kernel_initialize

; 123  : 	DebugClrScreen(0x1f);

	push	31					; 0000001fH
	call	?DebugClrScreen@@YAXE@Z			; DebugClrScreen

; 124  : 	DebugGotoXY(0, 0);

	push	0
	push	0
	call	?DebugGotoXY@@YAXEE@Z			; DebugGotoXY

; 125  : 
; 126  : 	uint8_t* sector = 0;
; 127  : 	sector = flpydsk_read_sector(33);

	push	33					; 00000021H
	call	?flpydsk_read_sector@@YAPAEH@Z		; flpydsk_read_sector
	add	esp, 20					; 00000014H
	mov	edi, eax

; 128  : 	for (int j = 0; j < 128; j++)

	xor	esi, esi
	npad	7
$LL5@main:

; 129  : 		DebugPrintf("%x ", sector[j]);

	movzx	ecx, BYTE PTR [esi+edi]
	push	ecx
	push	OFFSET $SG2984
	call	?DebugPrintf@@YAHPBDZZ			; DebugPrintf
	inc	esi
	add	esp, 8
	cmp	esi, 128				; 00000080H
	jl	SHORT $LL5@main
	npad	5
$LL2@main:

; 130  : 
; 131  : 	for (;;);

	jmp	SHORT $LL2@main
_main	ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\users\ali\desktop\mangos\systemcore\syscore\kernel\main.cpp
;	COMDAT ?stoi@@YAHPAD@Z
_TEXT	SEGMENT
_s$ = 8							; size = 4
?stoi@@YAHPAD@Z PROC					; stoi, COMDAT

; 104  : 	int n = 0;
; 105  : 	int i = 0;
; 106  : 	int sign = 1;
; 107  : 
; 108  : 	if (s[i] == '-'){

	mov	edx, DWORD PTR _s$[esp-4]
	xor	eax, eax
	push	ebx
	xor	ecx, ecx
	push	esi
	cmp	BYTE PTR [edx], 45			; 0000002dH
	lea	esi, DWORD PTR [eax+1]
	jne	SHORT $LN6@stoi

; 109  : 		sign = -1;

	or	esi, -1

; 110  : 		i++;

	mov	ecx, 1
$LN6@stoi:

; 111  : 	}
; 112  : 
; 113  : 	while (s[i] != 0){

	mov	bl, BYTE PTR [edx+ecx]
	add	edx, ecx
	test	bl, bl
	je	SHORT $LN1@stoi
$LL2@stoi:

; 114  : 		n *= 10;

	lea	ecx, DWORD PTR [eax+eax*4]

; 115  : 		n += s[i++];

	movsx	eax, bl
	mov	bl, BYTE PTR [edx+1]
	lea	edx, DWORD PTR [edx+1]
	lea	eax, DWORD PTR [eax+ecx*2]
	test	bl, bl
	jne	SHORT $LL2@stoi
$LN1@stoi:

; 116  : 	}
; 117  : 	n *= sign;

	imul	eax, esi
	pop	esi
	pop	ebx

; 118  : 	return n;
; 119  : }

	ret	0
?stoi@@YAHPAD@Z ENDP					; stoi
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\users\ali\desktop\mangos\systemcore\syscore\kernel\main.cpp
;	COMDAT ?gets@@YAXPADH@Z
_TEXT	SEGMENT
_ch$1 = 8						; size = 1
_s$ = 8							; size = 4
_max$ = 12						; size = 4
?gets@@YAXPADH@Z PROC					; gets, COMDAT

; 94   : void gets (char *s,int max){

	push	ebx
	push	esi
	push	edi

; 99   : 	} while (s[i-1] != '\r');

	mov	edi, DWORD PTR _s$[esp+8]
	xor	esi, esi
	npad	7
$LL7@gets:

; 95   : 	int i = 0; 
; 96   : 	do{
; 97   : 		s[i] = getch();

	call	?kbrd_get_last_std_char@@YAEXZ		; kbrd_get_last_std_char
	test	al, al
	je	SHORT $LL7@gets
	call	?kbrd_get_last_std_char@@YAEXZ		; kbrd_get_last_std_char
	movzx	eax, al
	push	eax
	call	?kbrd_make@@YAEE@Z			; kbrd_make
	mov	bl, al
	mov	BYTE PTR _ch$1[esp+12], bl
	call	?kbrd_destroy_last_char@@YAXXZ		; kbrd_destroy_last_char

; 98   : 		DebugPutc(s[i++]);

	push	DWORD PTR _ch$1[esp+12]
	mov	BYTE PTR [edi+esi], bl
	call	?DebugPutc@@YAXE@Z			; DebugPutc
	inc	esi
	add	esp, 8

; 99   : 	} while (s[i-1] != '\r');

	cmp	BYTE PTR [edi+esi-1], 13		; 0000000dH
	jne	SHORT $LL7@gets

; 100  : 	s[i-1] = 0;

	mov	BYTE PTR [esi+edi-1], 0
	pop	edi
	pop	esi
	pop	ebx

; 101  : }

	ret	0
?gets@@YAXPADH@Z ENDP					; gets
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\users\ali\desktop\mangos\systemcore\syscore\kernel\main.cpp
;	COMDAT ?getch@@YAEXZ
_TEXT	SEGMENT
?getch@@YAEXZ PROC					; getch, COMDAT

; 86   : uint8_t getch(){

$LL2@getch:

; 87   : 	uint8_t ch;
; 88   : 	while (kbrd_get_last_std_char() == 0);

	call	?kbrd_get_last_std_char@@YAEXZ		; kbrd_get_last_std_char
	test	al, al
	je	SHORT $LL2@getch

; 89   : 	ch = kbrd_make(kbrd_get_last_std_char());

	push	ebx
	call	?kbrd_get_last_std_char@@YAEXZ		; kbrd_get_last_std_char
	movzx	eax, al
	push	eax
	call	?kbrd_make@@YAEE@Z			; kbrd_make
	add	esp, 4
	mov	bl, al

; 90   : 	kbrd_destroy_last_char();

	call	?kbrd_destroy_last_char@@YAXXZ		; kbrd_destroy_last_char

; 91   : 	return ch;

	mov	al, bl
	pop	ebx

; 92   : }

	ret	0
?getch@@YAEXZ ENDP					; getch
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\users\ali\desktop\mangos\systemcore\syscore\kernel\main.cpp
;	COMDAT ?sleep@@YAXH@Z
_TEXT	SEGMENT
_ms$ = 8						; size = 4
?sleep@@YAXH@Z PROC					; sleep, COMDAT

; 79   : 
; 80   : 	static int ticks = ms + get_tick();

	mov	eax, DWORD PTR ?$S1@?1??sleep@@YAXH@Z@4IA
	test	al, 1
	jne	SHORT $LL2@sleep
	or	eax, 1
	mov	DWORD PTR ?$S1@?1??sleep@@YAXH@Z@4IA, eax
	call	?get_tick@@YAIXZ			; get_tick
	add	eax, DWORD PTR _ms$[esp-4]
	mov	DWORD PTR ?ticks@?1??sleep@@YAXH@Z@4HA, eax
	npad	1
$LL2@sleep:

; 81   : 	while (ticks > get_tick())

	call	?get_tick@@YAIXZ			; get_tick
	cmp	DWORD PTR ?ticks@?1??sleep@@YAXH@Z@4HA, eax
	ja	SHORT $LL2@sleep

; 82   : 		;
; 83   : }

	ret	0
?sleep@@YAXH@Z ENDP					; sleep
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\users\ali\desktop\mangos\systemcore\syscore\kernel\main.cpp
;	COMDAT ?kernel_initialize@@YAHPAUmultiboot_info@@@Z
_TEXT	SEGMENT
_kernel_img_size$ = -4					; size = 4
_info$ = 8						; size = 4
?kernel_initialize@@YAHPAUmultiboot_info@@@Z PROC	; kernel_initialize, COMDAT

; 20   : int _cdecl kernel_initialize (multiboot_info* info) {

	push	ecx
	push	esi
	push	edi

; 21   : 	uint32_t kernel_img_size;
; 22   : 	_asm mov word ptr[kernel_img_size], dx /*Get Kernel Image Size form Bootloader*/

	mov	WORD PTR _kernel_img_size$[esp+12], dx

; 23   : 	hal_initialize();

	call	?hal_initialize@@YAXXZ			; hal_initialize

; 24   : 
; 25   : 	//! install our exception handlers
; 26   : 	setvect(0, (void(__cdecl &)(void))divide_by_zero_fault);

	push	OFFSET ?divide_by_zero_fault@@YAXIII@Z	; divide_by_zero_fault
	push	0
	call	?setvect@@YAXIA6AXXZ@Z			; setvect

; 27   : 	setvect(1, (void(__cdecl &)(void))single_step_trap);

	push	OFFSET ?single_step_trap@@YAXIII@Z	; single_step_trap
	push	1
	call	?setvect@@YAXIA6AXXZ@Z			; setvect

; 28   : 	setvect(2, (void(__cdecl &)(void))nmi_trap);

	push	OFFSET ?nmi_trap@@YAXIII@Z		; nmi_trap
	push	2
	call	?setvect@@YAXIA6AXXZ@Z			; setvect

; 29   : 	setvect(3, (void(__cdecl &)(void))breakpoint_trap);

	push	OFFSET ?breakpoint_trap@@YAXIII@Z	; breakpoint_trap
	push	3
	call	?setvect@@YAXIA6AXXZ@Z			; setvect

; 30   : 	setvect(4, (void(__cdecl &)(void))overflow_trap);

	push	OFFSET ?overflow_trap@@YAXIII@Z		; overflow_trap
	push	4
	call	?setvect@@YAXIA6AXXZ@Z			; setvect

; 31   : 	setvect(5, (void(__cdecl &)(void))bounds_check_fault);

	push	OFFSET ?bounds_check_fault@@YAXIII@Z	; bounds_check_fault
	push	5
	call	?setvect@@YAXIA6AXXZ@Z			; setvect

; 32   : 	setvect(6, (void(__cdecl &)(void))invalid_opcode_fault);

	push	OFFSET ?invalid_opcode_fault@@YAXIII@Z	; invalid_opcode_fault
	push	6
	call	?setvect@@YAXIA6AXXZ@Z			; setvect

; 33   : 	setvect(7, (void(__cdecl &)(void))no_device_fault);

	push	OFFSET ?no_device_fault@@YAXIII@Z	; no_device_fault
	push	7
	call	?setvect@@YAXIA6AXXZ@Z			; setvect
	add	esp, 64					; 00000040H

; 34   : 	setvect(8, (void(__cdecl &)(void))double_fault_abort);

	push	OFFSET ?double_fault_abort@@YAXIIII@Z	; double_fault_abort
	push	8
	call	?setvect@@YAXIA6AXXZ@Z			; setvect

; 35   : 	setvect(10, (void(__cdecl &)(void))invalid_tss_fault);

	push	OFFSET ?invalid_tss_fault@@YAXIIII@Z	; invalid_tss_fault
	push	10					; 0000000aH
	call	?setvect@@YAXIA6AXXZ@Z			; setvect

; 36   : 	setvect(11, (void(__cdecl &)(void))no_segment_fault);

	push	OFFSET ?no_segment_fault@@YAXIIII@Z	; no_segment_fault
	push	11					; 0000000bH
	call	?setvect@@YAXIA6AXXZ@Z			; setvect

; 37   : 	setvect(12, (void(__cdecl &)(void))stack_fault);

	push	OFFSET ?stack_fault@@YAXIIII@Z		; stack_fault
	push	12					; 0000000cH
	call	?setvect@@YAXIA6AXXZ@Z			; setvect

; 38   : 	setvect(13, (void(__cdecl &)(void))general_protection_fault);

	push	OFFSET ?general_protection_fault@@YAXIIII@Z ; general_protection_fault
	push	13					; 0000000dH
	call	?setvect@@YAXIA6AXXZ@Z			; setvect

; 39   : 	setvect(14, (void(__cdecl &)(void))page_fault);

	push	OFFSET ?page_fault@@YAXIIII@Z		; page_fault
	push	14					; 0000000eH
	call	?setvect@@YAXIA6AXXZ@Z			; setvect

; 40   : 	setvect(16, (void(__cdecl &)(void))fpu_fault);

	push	OFFSET ?fpu_fault@@YAXIII@Z		; fpu_fault
	push	16					; 00000010H
	call	?setvect@@YAXIA6AXXZ@Z			; setvect

; 41   : 	setvect(17, (void(__cdecl &)(void))alignment_check_fault);

	push	OFFSET ?alignment_check_fault@@YAXIIII@Z ; alignment_check_fault
	push	17					; 00000011H
	call	?setvect@@YAXIA6AXXZ@Z			; setvect
	add	esp, 64					; 00000040H

; 42   : 	setvect(18, (void(__cdecl &)(void))machine_check_abort);

	push	OFFSET ?machine_check_abort@@YAXIII@Z	; machine_check_abort
	push	18					; 00000012H
	call	?setvect@@YAXIA6AXXZ@Z			; setvect

; 43   : 	setvect(19, (void(__cdecl &)(void))simd_fpu_fault);

	push	OFFSET ?simd_fpu_fault@@YAXIII@Z	; simd_fpu_fault
	push	19					; 00000013H
	call	?setvect@@YAXIA6AXXZ@Z			; setvect

; 44   : 	kbrd_initilize();

	call	?kbrd_initilize@@YAXXZ			; kbrd_initilize

; 45   : 
; 46   : 
; 47   : 	interrupt_enable(); /*Enabling interrupt*/

	call	?interrupt_enable@@YAXXZ		; interrupt_enable

; 48   : 
; 49   : 	unsigned int memory_amount = 1024;
; 50   : 	memory_amount += info->m_memoryLo;
; 51   : 	memory_amount += info->m_memoryHi * 64;
; 52   : 	pmm_initialize(memory_amount,0x100000+kernel_img_size*512);

	mov	eax, DWORD PTR _kernel_img_size$[esp+28]
	add	eax, 2048				; 00000800H
	shl	eax, 9
	push	eax
	mov	eax, DWORD PTR _info$[esp+28]
	mov	ecx, DWORD PTR [eax+8]
	add	ecx, 16					; 00000010H
	shl	ecx, 6
	add	ecx, DWORD PTR [eax+4]
	push	ecx
	call	?pmm_initialize@@YAXII@Z		; pmm_initialize

; 53   : 
; 54   : 
; 55   : 	memory_region *mem_mep = (memory_region*)0x1000;
; 56   : 	DebugGotoXY(0, 3);

	push	3
	push	0
	call	?DebugGotoXY@@YAXEE@Z			; DebugGotoXY
	add	esp, 32					; 00000020H
	mov	esi, 4096				; 00001000H

; 57   : 	for (int i = 0; i < 15; i++){

	xor	edi, edi
	npad	5
$LL5@kernel_ini:

; 58   : 		if (i>0 && mem_mep[i].startLow == 0)

	test	edi, edi
	jle	SHORT $LN2@kernel_ini
	cmp	DWORD PTR [esi], 0
	je	SHORT $LN9@kernel_ini
$LN2@kernel_ini:

; 59   : 			break;
; 60   : 		if (mem_mep[i].type == 1)	/*We Can Use it region*/

	cmp	DWORD PTR [esi+16], 1
	jne	SHORT $LN4@kernel_ini

; 61   : 			 pmm_clr_region(mem_mep[i].startLow, mem_mep[i].sizeLow);

	push	DWORD PTR [esi+8]
	push	DWORD PTR [esi]
	call	?pmm_clr_region@@YAXII@Z		; pmm_clr_region
	add	esp, 8
$LN4@kernel_ini:

; 57   : 	for (int i = 0; i < 15; i++){

	add	esi, 24					; 00000018H
	inc	edi
	cmp	esi, 4456				; 00001168H
	jl	SHORT $LL5@kernel_ini
$LN9@kernel_ini:

; 62   : 	}
; 63   : 	pmm_set_region(0x100000,kernel_img_size*512);

	mov	eax, DWORD PTR _kernel_img_size$[esp+12]
	shl	eax, 9
	push	eax
	push	1048576					; 00100000H
	call	?pmm_set_region@@YAXII@Z		; pmm_set_region

; 64   : 	vmm_initialize();

	call	?vmm_initialize@@YAXXZ			; vmm_initialize

; 65   : 
; 66   : 	//! set drive 0 as current drive
; 67   : 	flpydsk_set_working_drive(0);

	push	0
	call	?flpydsk_set_working_drive@@YAXE@Z	; flpydsk_set_working_drive

; 68   : 
; 69   : 	//! install floppy disk to IR 38, uses IRQ 6
; 70   : 	flpydsk_install(38);

	push	38					; 00000026H
	call	?flpydsk_install@@YAXH@Z		; flpydsk_install
	add	esp, 16					; 00000010H
	pop	edi
	pop	esi

; 73   : 
; 74   : }

	add	esp, 4

; 71   : 	//! set DMA buffer to 64k
; 72   : 	flpydsk_set_dma(0x8000);

	mov	DWORD PTR _info$[esp-4], 32768		; 00008000H
	jmp	?flpydsk_set_dma@@YAXH@Z		; flpydsk_set_dma
?kernel_initialize@@YAHPAUmultiboot_info@@@Z ENDP	; kernel_initialize
_TEXT	ENDS
END
